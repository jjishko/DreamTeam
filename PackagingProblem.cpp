//КОММЕНТАРИИ И КОД КАРКАСА НЕ МЕНЯТЬ!
/*
1) Написать алгоритм в отдельном cpp файле
	(пример и инструкции в SimplestPackagingGrigorev.cpp)
2) Создать объявление функции в Team.h
3) Вызвать функцию алгоритма в main
4) Проверить работоспособность кода, чтобы не положить проект
5) Выложить в репозиторий GitHub (в отдельную ветку!)
6) Идем тусить
*/

#include <iostream>
#include <vector>
#include <random>
#include <string>
#include <chrono>
#include <numeric>
#include <format>
#include <unordered_set>

#include "DatasetGeneration.h"
#include "Team.h"

using std::vector;
using std::string;
using std::pair;
using std::unordered_set;
using std::cin;
using std::cout;
using std::endl;

void run(string methodName, method foo, pair<const vector<int>&, const vector<int>&> data)
{
	auto start = std::chrono::system_clock::now();
	unordered_set<int> result = foo(data.first, data.second);
	auto end = std::chrono::system_clock::now();

	auto time = std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();

	int sumOfFilledContainers = 0;

	for (int ind : result)
	{
		sumOfFilledContainers += data.second[ind];
	}

	//share = share * 100 / std::accumulate(data.second.begin(), data.second.end(), 0);

	cout << "Название алгоритма: " << methodName << endl;
	cout << "Время работы: " << time << " мкс" << endl;
	cout << "Кол-во занятых контейнеров: " << result.size() << endl;
	cout << "Сумма размеров занятых контейнеров: " << sumOfFilledContainers << endl << endl;
}

int main()
{
	setlocale(LC_ALL, "ru");
	srand(time(NULL) + rand());

	pair<vector<int>, vector<int>> easyData = easyDataset();
	pair<vector<int>, vector<int>> rndData = randomDataset();
	pair<vector<int>, vector<int>> worstData = worstDataset();
	pair<vector<int>, vector<int>> impossibleData = impossibleDataset();

	// По образцу добавляете свой алгоритм в main с помощью функции run:
	// methodName - название алгоритма, 
	// foo - указатель на функцию алгоритма (имя функции)
	// data - easyData
	{
		cout << "=========== ЛУЧШИЕ ДАННЫЕ" << endl;
		cout << "Кол-во объектов: " << easyData.first.size() << endl;
		cout << "Кол-во контейнеров: " << easyData.second.size() << endl << endl;

		run("Простейшая упаковка", simplestPackagingGrigorev, easyData);
		run("First Fit", firstFitGolubeva, easyData);
		run("Best Fit", bestFitAllayarov, easyData);
		run("Tabu Search", TabuSearchOsadchenko, easyData);
		run("Генетический алгоритм", GenerationsGlyb, easyData);
		run("Муравьиный алгоритм", AntSolutionLeontev, easyData);
	}

	//То же самое, но data = rndData
	{
		cout << "=========== СЛУЧАЙНЫЕ ДАННЫЕ" << endl;
		cout << "Кол-во объектов: " << rndData.first.size() << endl;
		cout << "Кол-во контейнеров: " << rndData.second.size() << endl << endl;

		run("Простейшая упаковка", simplestPackagingGrigorev, rndData);
		run("First Fit", firstFitGolubeva, rndData);
		run("Best Fit", bestFitAllayarov, rndData);
		run("Tabu Search", TabuSearchOsadchenko, rndData);
		run("Генетический алгоритм", GenerationsGlyb, rndData);
		run("Муравьиный алгоритм", AntSolutionLeontev, rndData);
	}

	//Передаете худший вариант входных данных - worstData
	{
		cout << "=========== ХУДШИЕ ДАННЫЕ" << endl;
		cout << "Кол-во объектов: " << worstData.first.size() << endl;
		cout << "Кол-во контейнеров: " << worstData.second.size() << endl << endl;

		run("Простейшая упаковка", simplestPackagingGrigorev, worstData);
		run("First Fit", firstFitGolubeva, worstData);
		run("Best Fit", bestFitAllayarov, worstData);
		run("Tabu Search", TabuSearchOsadchenko, worstData);
		run("Генетический алгоритм", GenerationsGlyb, worstData);
		run("Муравьиный алгоритм", AntSolutionLeontev, worstData);
	}

	{
		cout << "=========== НЕВОЗМОЖНЫЕ ДАННЫЕ" << endl;
		cout << "Кол-во объектов: " << impossibleData.first.size() << endl;
		cout << "Кол-во контейнеров: " << impossibleData.second.size() << endl << endl;

		run("Простейшая упаковка", simplestPackagingGrigorev, impossibleData);
		run("First Fit", firstFitGolubeva, impossibleData);
		run("Best Fit", bestFitAllayarov, impossibleData);
		run("Tabu Search", TabuSearchOsadchenko, impossibleData);
		run("Генетический алгоритм", GenerationsGlyb, impossibleData);
		run("Муравьиный алгоритм", AntSolutionLeontev, impossibleData);
	}

	return 0;
}